// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ploggi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PodLogsClient is the client API for PodLogs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PodLogsClient interface {
	GetLog(ctx context.Context, in *Pod, opts ...grpc.CallOption) (*PodLog, error)
	StreamLog(ctx context.Context, in *Pod, opts ...grpc.CallOption) (PodLogs_StreamLogClient, error)
}

type podLogsClient struct {
	cc grpc.ClientConnInterface
}

func NewPodLogsClient(cc grpc.ClientConnInterface) PodLogsClient {
	return &podLogsClient{cc}
}

func (c *podLogsClient) GetLog(ctx context.Context, in *Pod, opts ...grpc.CallOption) (*PodLog, error) {
	out := new(PodLog)
	err := c.cc.Invoke(ctx, "/ploggi.PodLogs/GetLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podLogsClient) StreamLog(ctx context.Context, in *Pod, opts ...grpc.CallOption) (PodLogs_StreamLogClient, error) {
	stream, err := c.cc.NewStream(ctx, &PodLogs_ServiceDesc.Streams[0], "/ploggi.PodLogs/StreamLog", opts...)
	if err != nil {
		return nil, err
	}
	x := &podLogsStreamLogClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PodLogs_StreamLogClient interface {
	Recv() (*PodLog, error)
	grpc.ClientStream
}

type podLogsStreamLogClient struct {
	grpc.ClientStream
}

func (x *podLogsStreamLogClient) Recv() (*PodLog, error) {
	m := new(PodLog)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PodLogsServer is the server API for PodLogs service.
// All implementations must embed UnimplementedPodLogsServer
// for forward compatibility
type PodLogsServer interface {
	GetLog(context.Context, *Pod) (*PodLog, error)
	StreamLog(*Pod, PodLogs_StreamLogServer) error
	mustEmbedUnimplementedPodLogsServer()
}

// UnimplementedPodLogsServer must be embedded to have forward compatible implementations.
type UnimplementedPodLogsServer struct {
}

func (UnimplementedPodLogsServer) GetLog(context.Context, *Pod) (*PodLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLog not implemented")
}
func (UnimplementedPodLogsServer) StreamLog(*Pod, PodLogs_StreamLogServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamLog not implemented")
}
func (UnimplementedPodLogsServer) mustEmbedUnimplementedPodLogsServer() {}

// UnsafePodLogsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PodLogsServer will
// result in compilation errors.
type UnsafePodLogsServer interface {
	mustEmbedUnimplementedPodLogsServer()
}

func RegisterPodLogsServer(s grpc.ServiceRegistrar, srv PodLogsServer) {
	s.RegisterService(&PodLogs_ServiceDesc, srv)
}

func _PodLogs_GetLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pod)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodLogsServer).GetLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ploggi.PodLogs/GetLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodLogsServer).GetLog(ctx, req.(*Pod))
	}
	return interceptor(ctx, in, info, handler)
}

func _PodLogs_StreamLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Pod)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PodLogsServer).StreamLog(m, &podLogsStreamLogServer{stream})
}

type PodLogs_StreamLogServer interface {
	Send(*PodLog) error
	grpc.ServerStream
}

type podLogsStreamLogServer struct {
	grpc.ServerStream
}

func (x *podLogsStreamLogServer) Send(m *PodLog) error {
	return x.ServerStream.SendMsg(m)
}

// PodLogs_ServiceDesc is the grpc.ServiceDesc for PodLogs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PodLogs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ploggi.PodLogs",
	HandlerType: (*PodLogsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLog",
			Handler:    _PodLogs_GetLog_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamLog",
			Handler:       _PodLogs_StreamLog_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/api/ploggi/ploggi.proto",
}
